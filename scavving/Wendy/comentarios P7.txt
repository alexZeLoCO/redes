//constantes
interface tftp1Cons {
 static final int tout=0, close=1, frame=2; // eventos
 static final int espera=0, recibiendo=1, acabando=2; // estados
 static final int RRQ=1, WRQ=2, DATA=3, ACK=4,ERROR=5;
 // códigos de trama
 static final int ServerPort=69;
} //tftp1Cons

//arquitectura de objetos 

public class tftp1 {

//se encarga de levantar todos los objetos para la adjudicación
//al cliente le enviamos outputstream
//a line y  timer inputstream 
 
 public static void main (String args[]) throws IOException {
if (args.length!= 3){
 throw(new RuntimeException ("argumentos: host get fichero" "));
} else
 if (args[1].equals("get")){
 PipedOutputStream o = new PipedOutputStream();  //tuberia de salida
 PipedInputStream i = new PipedInputStream(o);  //tuberia de entrada asociada a las salida
 LinkedList<DatagramPacket> listdp=
new LinkedList<DatagramPacket>();
 DatagramSocket sock = new DatagramSocket();
 tftp1Servidor ts = new tftp1Servidor(); // Test server
 tftp1Timer ti = new tftp1Timer(o); // Timer manager
 tftp1Cliente tf =
 new tftp1Cliente(args[2], args[0], i, ti, listdp, sock);
 tft11Line l = new tftp1Line(o, listdp, sock); // Line manager
 } else {
 System.out.println("comando desconocido: "+args[0]+args[1]+args[2]));}
 } //main
} //tftp1

//-----------------------------//

//variables y otros

class tftp1Frame implements tftp1Cons {

// implementa el interface 

 InetAddress a; // direccion IP
 int seqnum = 0; // numero de secuencia
 int remoteTID; // puerto del servidor
 DatagramSocket sock; // socket principal
 DatagramSocket auxsock; // socket auxiliar para tftp1Servidor
 DatagramPacket sent, rec; // Paquetes enviado y recibido
 boolean firstDATAframe () {
return((code(rec)==DATA)&&(remoteTID==ServerPort));
 } // detecta si es la primera trama enviada
 // es decir, si el puerto del servidor es el 69

//con esto cambiamos el puerto si es el primero 

 String ch(int b) { byte[] bb = {(byte) b}; return new String(bb); }
// convierte el primer byte de int a String

//-----------------------------//
//selectores

int code(DatagramPacket d) {
 return ((((d.getData())[0])<< 8)|((d.getData())[1]));
} // devuelve como int código: el primer byte del campo
//numero asociado a los 2 primeros bytes 

// de datos de d desplazado a la izquierda junto con el segundo byte
int seqnum(DatagramPacket d) {
 int a= d.getData()[2];
 int b= d.getData()[3];
 a= a<0?a+256:a;
 b= b<0?b+256:b;
 return a*256+b
} // devuelve el número de bloque de una trama de DATA o ACK
 // obtiene el número a partir del tercer y cuarto byte de la trama

//

byte[] dat(DatagramPacket d) {
 byte[] b = new byte[(d.getLength() - 4)];
 System.arraycopy(d.getData(), 4, b, 0, (d.getLength() - 4)); 
//copia desde x punto a otro y (de un array a otro)
// copia de "d.getData" desde la posicion 4 en "b" en b desde la posicion 0

 return b;
} // devuelve el campo de datos de una trama como array de bytes
String file(DatagramPacket d) {
 int i; byte[] b = d.getData(); // obtiene la trama como array de bytes
 for (i = 2; b[i] != 0; i++){;}; // detección del delimitador
 return new String(b, 2, (i-2)); // conversión ascii a String
} // devuelve como String el nombre del fichero de una trama RRQ o WRQ

String mode(DatagramPacket d) {
 int del, i;
 byte[] b = d.getData(); // obtiene la trama como array de bytes
 for (i = 2; b[i]!=0; i++){;}; // detección del delimitador
 del=i;
 for (i = del+1; b[i]!=0; i++){;}; // segundo delimitador
 return new String(b, (del+1), (i-(del+1))); // ascii a String
} // devuelve como String el mode de una trama RRQ o WRQ

String errormsg (DatagramPacket d) {
 int i;
 byte[] b = d.getData();
 for (i = 4; b[i]!=0; i++){};
 return new String(b, 4, (i-4));
} // devuelve como String el mensaje de error de una trama de ERROR

//---------------------------//
//constructores

DatagramPacket RRQ(String file, String type) throws IOException {
//ch pasa a string 
 byte[] b =(ch(0)+ch(RRQ)+file +ch(0)+type+ch(0)).getBytes();
 return new DatagramPacket(b, b.length, a, remoteTID);
} // construye un DatagramPacket con una trama RRQ

DatagramPacket WRQ(String file, String type) throws IOException {
//
 byte[] b =(ch(0)+ch(WRQ)+file+ch(0)+type+ch(0)).getBytes();
 return new DatagramPacket(b, b.length, a, remoteTID);
} // construye un DatagramPacket con una trama WRQ

DatagramPacket ERROR(int code, String msg) throws IOEx.{
//
 byte[] b = (ch(0) + ch(ERROR) + ch(0) + ch(code) + msg + ch(0)).getBytes();
 return new DatagramPacket(b, b.length, a, remoteTID);
} // construye un DatagramPacket con una trama ERROR

DatagramPacket DATA (byte[] b, int l) throws IOException {
 b[0] = 0;
 b[1] = DATA;
 b[2] = (byte) (seqnum/256);
 b[3] = (byte) (seqnum%256);
 return new DatagramPacket(b, l, a, remoteTID);
} // construye un DatagramPacket con una trama DATA

DatagramPacket ACK() throws IOException {
//
 byte[] b = {0, ACK, (byte)(seqnum/256), (byte)(seqnum%256)};
 return new DatagramPacket(b, b.length, a, remoteTID);
} // construye un DatagramPacket con una trama ACK

void SendDP (DatagramSocket s, DatagramPacket p) throws IOException{
 
s.send(sent = p);
 // printframe(p);
} // envía el DatagramPacket y lo guarda en sent para retransmisión

//--------------------------------//



///----------------//

//cabecera

class tftp1Cliente extends tftp1Frame implements Runnable, tftp1Cons {
 String file, host; // parámetros de activación
 FileOutputStream fichout;
 PipedInputStream i;
 Timer t; // referencia al gestor de timers
 LinkedList<DatagramPacket> listrec; // lista de paquetes recibidos
 int event, state = espera; // variable de evento y estado

tftp1Cliente (String f, String h, PipedInputStream inp, Timer ti,
 LinkedList<DatagramPacket> ll ,DatagramSocket s) {
//se encarga de cargar en estos atributos propios del cliente y creo el fichero que vamos a recibir
file = f;
 host = h;
 i = inp;
 t = ti;
 listrec= ll;
 sock = s;
 try {
fichout = new FileOutputStream("copiaencliente_" + file);
a = InetAddress.getByName(host);
Thread tc = new Thread(this);
tc.start();
 } catch (UnknownHostException e) {
System.out.println("tftp1Cliente excepcion: "+e);
 } catch (IOException e) {System.out.println("tftp1Cliente excepcion: " + e);}
} //constructor tftp1Cliente

//------------//

//automata

public void run () {
 try {
remoteTID = ServerPort; // primera transición
...........
while (state != espera) { // bucle de espera de eventos
 event = i.read();
 switch (event) {
case frame: ....... // procesa la trama
case close: ....... // retorna a estado inicial
case tout: ....... // retransmite
default: break;
 }
}
fichout.close();
 } catch ( ..... excepciones }
} // run

//---------//

//transiciones 

remoteTID = ServerPort; // primera transición
SendDP(sock, (sent=RRQ(file, "netascii")));
//envia el datagrampacket a traves del socket asignado y saca una trama RRQ con el nombre file y el modo 
t.startTimers();
state = recibiendo;
while (state != espera) { // bucle espera de eventos
 event = i.read(); // espera evento
 switch (event) {
case frame: ....................
case close:
state = espera;
break;
case tout:
if (state == recibiendo) { // reenvío de trama
 SendDP(sock, sent);
 t.startTout();
}
break;
default: break;
 }

//-------------------//

case frame:
//
 synchronized (listrec) {rec=listrec.removeFirst();}
 if (firstDATAframe()){ remoteTID=rec.getPort();} // guarda nuevo TID remoto
 //if (rec.getPort() != remoteTID) { // trama no llega del servidor
SendDP(sock, ERROR(0, "wrong TID"));// lo podemos quitar
break;
 }
 if (code(rec)==DATA) {
if ((seqnum(rec)) != seqnum) { // trama de datos nueva
 seqnum=seqnum(rec);
 t.startTimers();
 fichout.write(dat(rec));
 }
 SendDP(sock, (sent=ACK())); // envía (re)asentimiento
 if (state == recibiendo) { t.startTout(); }
 if (rec.getLength() < 516) { // última trama de datos
 state =acabando;
 t.stopTout();

//redundante porque si me llega el ultimo paquete y no son 516 entonces para el Tout
 }
 }
 if (code(rec)==ERROR) {
 state = espera;
 t.stopTimers();
 }
 break;


//-----------------------//

//tftp1Line

class tftp1Line implements Runnable, tftp1Cons {
 LinkedList <DatagramPacket> listrec;
 DatagramSocket sock;
 PipedOutputStream o;

 tftp1Line ( PipedOutputStream ot, LinkedList<DatagramPacket> ll,
 DatagramSocket s) {
o= ot;
listrec= ll;
sock= s;
Thread l = new Thread(this);
l.start();
 } //tftp1Line constructor
 public void run () {
while (true) {
 try {
DatagramPacket rec =
 new DatagramPacket(new byte[516],516);
sock.receive(rec); // espera llegada de datagrama
synchonized (listrec){
 listrec.addLast(rec); //deja datagrama recibido en la lista
}
o.write((byte)frame); // envia evento “frame”
o.flush();
 } catch (IOException e) {
 System.out.println("Line: " + e);
 }
} //while
 } //run
} // tftp1Line


//*****************//

//tftp1Timer

class tftp1Timer implements Runnable, tftp1Cons {

//implementa runable 

 static final int plazo=2, fin=4;
 int[] timer = {0,0} ; // array con contadores de los dos timers
 PipedOutputStream o; // stream para envío de timeouts
 Tftp1Timer (PipedOutputStream ot) {
o = ot;
Thread t = new Thread(this); t.start();
//el hilo ejecuta el emtrodo rn
 } //Timer constructor
 synchronized void startTout () { timer[tout] = plazo; } //
 synchronized void stopTout () { timer[tout] = 0; }
 synchronized void startTimers (){ // arranca los dos timers
timer[tout] = plazo;
timer[close] = plazo*fin;
 }
 synchronized void stopTimers () { // para los dos timers
timer[tout] = 0;
timer[close] = 0;
}
public void run () {
 try {
while (true) {
 Thread.sleep (1000); // espera 1 segundo (no se ejecuta)
 synchronized (this) { //para no poder acceder al timer desde el cliente
 for (int i=0; i < timer.length; i++) { // todos los timers
 if (timer[i] > 0)
 if (--timer[i] == 0) { // decrementa timer[i] y compara
 o.write((byte)i); o.flush(); // envía timeout
 }
 } } }
 } catch (IOException e) {System.out.println("tftp1Timer: " + e);
 } catch (InterruptedException e) {System.out.println("tftp1Timer: ”+e); }
} } 

//------------------------//

programa de pruebas 

class tftp1Servidor extends tftp1Frame implements Runnable {
 FileInputStream i;
 tftp1Servidor() {
Thread ts = new Thread(this);
ts.start();
 }
 int sendDATA () throws IOException {
int len; byte b[] = new byte[516];
len = i.read(b, 4, 512);
if (len<0) len=0; // fin del fichero
SendDP(auxsock, DATA(b, (len+4)));//+4 porque son los 4 bites iniciales 
this.seqnum++;
return len;
 } // envía tramas de datos del fichero
 public void run() {
try {
 ...... // sequencias de pruebas
} catch (…excepciones e) {System.out.println(”........”);
 }
}



//-------------------//

secuencia e pruebas 

seqnum = 1; // inicializar número de secuencia
rec= new DatagramPacket(new byte[516], 516);
sock = new DatagramSocket(ServerPort); // socket para RRQ
auxsock = new DatagramSocket(); // socket para resto de com.
//puerto aleatorio por donde va a enviar la información al cliente

sock.receive(rec); // espera primer RRQ
remoteTID=rec.getPort();
a=rec.getAddress();
i = new FileInputStream(file(rec));
sock.receive(rec); // espera siguiente retransmision de RRQ
int l = sendDATA(); // envía datos
auxsock.receive(rec); // espera ACK ( no envia DATA)
auxsock.receive(rec); // espera siguiente retransmision de ACK
l = sendDATA(); // envía datos
auxsock.receive(rec); // espera ACK
l = sendDATA(); // envía datos
auxsock.receive(rec); // espera ACK
l = sendDATA(); // envia datos